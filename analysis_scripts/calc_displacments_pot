#! /usr/bin/perl -w

#
#    Copyright 2010 Andrew Walker
#
#    This file is part of the Dislocator package.
#
#    The Dislocator package is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    The Dislocator package is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with the Dislocator package.  If not, see <http://www.gnu.org/licenses/>.
#

use Math::Trig;

sub angle {
# Calculates angle around x axis in radians
# result is between 0 and 2pi.
# call by &angle($x, $y, $z).

    my $z = pop(@_);
    my $y = pop(@_);
    my $x = pop(@_);
    my $angle = 3*pi;
    if ($z == 0.0) {
        $z = 0.00000000000000000000000000000000000000000000001;
    }
    if (($y >= 0) and ($z > 0)) {
        $angle = atan ($y/$z);
    } elsif (($y >= 0) and ($z < 0)) {
        $angle = atan ($y/$z) + pi;
    } elsif (($y < 0) and ($z < 0)) {
        $angle = atan ($y/$z) + pi;
    } elsif (($y < 0) and ($z > 0)) {
        $angle = atan ($y/$z) + 2*pi;
    } else {
        die "Unexpected error in angle calc (sub angle)!\n";
    }

    if (($angle > 2*pi) or ($angle < 0)) {
	die "error in angle calc (angle is $angle)\n";
    }   
  
    return $angle;
}

my $do_electro = 1;
{ # A block to deal with input for a polymeric system
    print "Parsing a polymeric cell with two regions\n";
    
    my $start_flag = 0;
    my $end_flag = 0;
    my $cell_flag = 0;
    my $pot_flag = 0;
    while (<STDIN>) {
	
# Get atomic co-ordinates    
	if (/Polymer cell parameter/) {
	    $cell_flag ++;
	  ##  print "incremented cell flag...\n"; # debugging
	}

	if (($cell_flag == 1) and (/a =\s+(\d+\.\d+)/)) {
	    $a_cell = $1;
	    print "cell paramiter = $a_cell\n"; 
	}
# Get sataring atomic co-ordinates
	
# Does not work unlss co-ordinates include regions - need to fix...
	if (/Mixed fractional\/Cartesian coordinates of polymer :/) {
	    $start_flag = 6;
	}
	
	if ((/-{79}/) and ($start_flag > 0)) {
	    $start_flag --;
	    next;
	}
	
	if (($start_flag == 3) or ($start_flag == 1)) {
	    my @split_line = split;            #
	    push (@atom_number, $split_line[0]);
#        push (@atom_name, $split_line[1]); # to fix the one lable bugggg 
#        push (@start_atom_y, $split_line[5]);
#        push (@start_atom_z, $split_line[6]);
	    
	    $atom_name{$split_line[0]} = $split_line[1];
	    $atom_type{$split_line[0]} = $split_line[2]; # core or shel
	    $atom_start_x{$split_line[0]} = ($split_line[3] * $a_cell);
	    $atom_start_y{$split_line[0]} = $split_line[4];
	    $atom_start_z{$split_line[0]} = $split_line[5];
##	    print "$atom_start_y{$split_line[0]}\n"; # debugging
	    if ($atom_start_y{$split_line[0]} eq "*") {
##		print "A damm free atom flag\n"; # debugging
		$atom_start_y{$split_line[0]} = $split_line[5];
		$atom_start_z{$split_line[0]} = $split_line[7];
	    }

	    next;
	}
	
# Get final atomic co-ordinates
	
	if (/Final fractional\/Cartesian coordinates of atoms :/) {
	    $end_flag = 3;
	}
	
	if ((/-{79}/) and ($end_flag > 0)) {
	    $end_flag --;
	    next;
	}
	
	if ($end_flag == 1) {
	    my @split_line = split;            #
#	push (@end_atom_number, $split_line[0]);
#        push (@end_atom_name, $split_line[1]); # to fix the one lable bugggg 
#        push (@end_atom_y, $split_line[5]);
#        push (@end_atom_z, $split_line[6]);
	    
	    $atom_end_x{$split_line[0]} = ($split_line[3] * $a_cell);
	    $atom_end_y{$split_line[0]} = $split_line[4];
	    $atom_end_z{$split_line[0]} = $split_line[5];
	    next;
	}

# Get electrostatic pot's # need to set a flag if these do not exist
	if (/Electrostatic potential/) {
	    $pot_flag = 3;
	}

	if ((/-{79}/) and ($pot_flag > 0)) {
	    $pot_flag --;
	}

	if ($pot_flag == 1) {
	    my @split_line = split;
	    print " An esp line: $_\n";
	    $atom_pot{$split_line[0]} = $split_line[3];
	}

    }   

# Tyding up after reading data...
    if ($pot_flag == -1) {
	print "No Elecostatic potentals found.\n";
	print "So will skip these bits\n";
	$do_electro = 0;
    }
}
# Calculate displacments..

#print "12345 12345 12 123456789abc 123456789abc 123456789abc 123456789abc 123456789abc 123456789abc\n";
print "No    name   cs start x (a)  start y (a)  start z (a)     end x (a)   end y (a)    end z (a)\n";
foreach (@atom_number) {
# Print basic atomic info
    printf "%-5d %-5s %-2s %12g %12g %12g %12g %12g %12g\n",
    $_, $atom_name{$_}, $atom_type{$_}, $atom_start_x{$_}, $atom_start_y{$_},
    $atom_start_z{$_}, $atom_end_x{$_}, $atom_end_y{$_}, $atom_end_z{$_}; 

    $rad{$_} = sqrt(($atom_start_y{$_}*$atom_start_y{$_}) + ($atom_start_z{$_}*$atom_start_z{$_}));
    $del_x{$_} = ($atom_start_x{$_} - $atom_end_x{$_});
    my $lat_param = $a_cell;
    if ($del_x{$_} >= (0.5 * $lat_param)) {
	$del_x{$_} = $del_x{$_} - $lat_param;
    } elsif ($del_x{$_} <= (-0.5 * $lat_param)) {
	$del_x{$_} = $del_x{$_} + $lat_param;
    }

    $del_y{$_} = ($atom_start_y{$_} - $atom_end_y{$_});
    $del_z{$_} = ($atom_start_z{$_} - $atom_end_z{$_});
    $del_tot{$_} = sqrt(($del_x{$_}*$del_x{$_}) + ($del_y{$_}*$del_y{$_}) + ($del_z{$_}*$del_z{$_}));
   
    $del_rad{$_} = ($rad{$_} - (sqrt(($atom_end_y{$_}*$atom_end_y{$_}) + ($atom_end_z{$_}*$atom_end_z{$_}))));

 #Calculate angle - between 0 and 2pi.
   $start_angle{$_} = &angle ($atom_start_x{$_}, $atom_start_y{$_}, $atom_start_z{$_});
    $end_angle{$_} = &angle ($atom_end_x{$_}, $atom_end_y{$_}, $atom_end_z{$_});
    $del_angle{$_} = $start_angle{$_} - $end_angle{$_}; 

}
	

 
print "\n\nNo    name   del_x   (a)  del_y   (a)  del_z   (a)   del_tot (a)\n";
foreach (@atom_number) {
    printf "%-5d %-5s %12g %12g %12g %12g\n",
    $_, $atom_name{$_}, $del_x{$_}, $del_y{$_},
    $del_z{$_}, $del_tot{$_};
}

print "\n\nNo     name    rad    theta\n";
foreach (@atom_number) {
    printf "%-5d %-5s %12g %12g\n",
    $_, $atom_name{$_}, $rad{$_}, $start_angle{$_};  
}


{
 
    open PLOT, "> plot_y_z_dr.dat"
	or die "Could not open plot_y_x_dr.dat: $!\n";
    
    foreach (@atom_number) {
	my $vec_ang = (&angle ($del_x{$_}, $del_y{$_}, $del_z{$_})) *(180/pi);
	my $rad = 10 * sqrt (($del_y{$_} **2) + ($del_z{$_} **2));
	if ($rad > 0) { 
	    printf PLOT "%20f %20f %20f %20f\n", 
	    $atom_end_y{$_}, $atom_end_z{$_}, $vec_ang, $rad;
	}
    }
    close PLOT;
}


#     # ######     #
##    # #     #   ###
# #   # #     #    #
#  #  # ######          I have not applyed
#   # # #     #    #    1d periodic boundary
#    ## #     #   ###   conditions
#     # ######     #

print "Linking shels and cores...\n";
foreach (@atom_number) {
    if (($atom_type{$_} eq "s") or ($atom_type{$_} eq "bs")) {
	# find core
	$smallest_so_far = 5 * 5;
	foreach $i (@atom_number) {
	    if ($atom_type{$i} eq "c") {
		if ($atom_name{$i} =~ /O/) {
		    
		    my $dx = $atom_end_x{$_} - $atom_end_x{$i};
		    $dx *= $dx; # so dx, dy and dz are squared!
		    if ($dx <  $smallest_so_far) {
			my $dy = $atom_end_y{$_}  - $atom_end_y{$i};
			$dy *= $dy;
			if ($dy <  $smallest_so_far) {
			    my $dz = $atom_end_z{$_}  - $atom_end_z{$i};
			    $dz *= $dz;
			    if  ($dz <  $smallest_so_far) {
				$pol = sqrt ($dx + $dy + $dz);
				if ($pol < $smallest_so_far) {
				    $smallest_so_far = $pol;
				    $this_shells_core = $i;
				}
			    }
			}
		    }
		}
	    }
	}
	$atoms_shel{$this_shells_core} = $_;
	$atoms_polerisation{$this_shells_core} = $smallest_so_far;
	#
    }
}


print "\n\nNo     name    rad    del_tot\n";

foreach (@atom_number) {
    printf "%-5d %-5s %12g %12g %12g %12g\n",
    $_, $atom_name{$_}, $rad{$_}, $del_tot{$_}, $del_x{$_}, $del_rad{$_};

    push @plot_line_r_dt, (sprintf "%20f %20f\n", $rad{$_}, $del_tot{$_});
    push @plot_line_r_dr, (sprintf "%20f %20f\n", $rad{$_}, $del_rad{$_});
    push @plot_line_r_dx, (sprintf "%20f %20f\n", $rad{$_}, $del_x{$_});
    if ($do_electro==1) {
	push @plot_line_r_pot, (sprintf "%20f %20f\n", $rad{$_}, $atom_pot{$_});
    }
    
    if ($atom_name{$_} =~ /O/) {
	if ($atom_type{$_} eq "c") {
	    push @Oc_plot_line_r_dt, (sprintf "%20f %20f\n", $rad{$_}, $del_tot{$_});
	    push @Oc_plot_line_r_dr, (sprintf "%20f %20f\n", $rad{$_}, $del_rad{$_});
	    push @Oc_plot_line_r_dx, (sprintf "%20f %20f\n", $rad{$_}, $del_x{$_});
	    push @Oc_plot_line_r_pol, (sprintf "%20f %20f\n", $rad{$_}, $atoms_polerisation{$_});
	    if ($do_electro==1) {
		push @Oc_plot_line_r_pot, (sprintf "%20f %20f\n", $rad{$_}, $atom_pot{$_});
	    }
	    } elsif (($atom_type{$_} eq "s") or ($atom_type{$_} eq "bs")) {
# do nothing...
	} else {die "do not recognise $atom_type{$_}!"}

    } elsif ($atom_name{$_} =~ /Mg/) {
	push @Mg_plot_line_r_dt, (sprintf "%20f %20f\n", $rad{$_}, $del_tot{$_});
	push @Mg_plot_line_r_dr, (sprintf "%20f %20f\n", $rad{$_}, $del_rad{$_});
	push @Mg_plot_line_r_dx, (sprintf "%20f %20f\n", $rad{$_}, $del_x{$_});
	if ($do_electro==1) {
	    push @Mg_plot_line_r_pot, (sprintf "%20f %20f\n", $rad{$_}, $atom_pot{$_});
	}
    } elsif ($atom_name{$_} =~ /Si/) {
	push @Si_plot_line_r_dt, (sprintf "%20f %20f\n", $rad{$_}, $del_tot{$_});
	push @Si_plot_line_r_dr, (sprintf "%20f %20f\n", $rad{$_}, $del_rad{$_});
	push @Si_plot_line_r_dx, (sprintf "%20f %20f\n", $rad{$_}, $del_x{$_});
	if ($do_electro==1) {
	    push @Si_plot_line_r_pot, (sprintf "%20f %20f\n", $rad{$_}, $atom_pot{$_});
	}
	} else {die "do not recognise $atom_name{$_}!"}
}

@plot_line_r_dt = sort {$a cmp $b} @plot_line_r_dt; # May one day need better sort routines with a
@plot_line_r_dr = sort {$a cmp $b} @plot_line_r_dr; # string match thing so we just sort on the 
@plot_line_r_dx = sort {$a cmp $b} @plot_line_r_dx; # first field. 
if ($do_electro==1) {
@plot_line_r_pot = sort {$a cmp $b} @plot_line_r_pot;
}
@Oc_plot_line_r_dt = sort {$a cmp $b} @Oc_plot_line_r_dt; # May one day need better sort routines with a
@Oc_plot_line_r_dr = sort {$a cmp $b} @Oc_plot_line_r_dr; # string match thing so we just sort on the 
@Oc_plot_line_r_dx = sort {$a cmp $b} @Oc_plot_line_r_dx; # first field. 
@Oc_plot_line_r_pol = sort {$a cmp $b} @Oc_plot_line_r_pol;
if ($do_electro==1) {
@Oc_plot_line_r_pot = sort {$a cmp $b} @Oc_plot_line_r_pot;
}
@Mg_plot_line_r_dt = sort {$a cmp $b} @Mg_plot_line_r_dt; # May one day need better sort routines with a
@Mg_plot_line_r_dr = sort {$a cmp $b} @Mg_plot_line_r_dr; # string match thing so we just sort on the 
@Mg_plot_line_r_dx = sort {$a cmp $b} @Mg_plot_line_r_dx; # first field. 
if ($do_electro==1) {
@Mg_plot_line_r_pot = sort {$a cmp $b} @Mg_plot_line_r_pot;
}
@Si_plot_line_r_dt = sort {$a cmp $b} @Si_plot_line_r_dt; 
@Si_plot_line_r_dr = sort {$a cmp $b} @Si_plot_line_r_dr; 
@Si_plot_line_r_dx = sort {$a cmp $b} @Si_plot_line_r_dx;
if ($do_electro==1) {
#@Si_plot_line_r_pot = sort {$a cmp $b} @Si_plot_line_r_pot;
}

if ($do_electro==1) {
open PLOT, "> plot_r_pot_Oc.dat"
    or die "Could not open plot_r_pot_Oc.dat: $!\n";
foreach (@Oc_plot_line_r_pot) {print PLOT $_}
close PLOT;

open PLOT, "> plot_r_pot_Mg.dat"
    or die "Could not open plot_r_pot_Mg.dat: $!\n";
foreach (@Mg_plot_line_r_pot) {print PLOT $_}
close PLOT;

open PLOT, "> plot_r_pot_Si.dat"
    or die "Could not open plot_r_pot_Si.dat: $!\n";
foreach (@Si_plot_line_r_pot) {print PLOT $_}
close PLOT;

open PLOT, "> plot_r_pot.dat"
    or die "Could not open plot_r_pot.dat: $!\n";
foreach (@plot_line_r_pot) {print PLOT $_}
close PLOT;
}

open PLOT, "> plot_r_pol.dat"
    or die "Could not open plot_r_dt.dat: $!\n";
foreach (@Oc_plot_line_r_pol) {print PLOT $_}
close PLOT;

open PLOT, "> plot_r_dt.dat"
    or die "Could not open plot_r_dt.dat: $!\n";
foreach (@plot_line_r_dt) {print PLOT $_}
close PLOT;

open PLOT, "> plot_r_dr.dat"
    or die "Could not open plot_r_dr.dat: $!\n";
foreach (@plot_line_r_dr) {print PLOT $_}
close PLOT;

open PLOT, "> plot_r_dx.dat"
    or die "Could not open plot_r_dx.dat: $!\n";
foreach (@plot_line_r_dx) {print PLOT $_}
close PLOT;

open PLOT, "> O_plot_r_dt.dat"
    or die "Could not open plot_r_dt.dat: $!\n";
foreach (@Oc_plot_line_r_dt) {print PLOT $_}
close PLOT;

open PLOT, "> O_plot_r_dr.dat"
    or die "Could not open plot_r_dr.dat: $!\n";
foreach (@Oc_plot_line_r_dr) {print PLOT $_}
close PLOT;

open PLOT, "> O_plot_r_dx.dat"
    or die "Could not open plot_r_dx.dat: $!\n";
foreach (@Oc_plot_line_r_dx) {print PLOT $_}
close PLOT;

open PLOT, "> Mg_plot_r_dt.dat"
    or die "Could not open plot_r_dt.dat: $!\n";
foreach (@Mg_plot_line_r_dt) {print PLOT $_}
close PLOT;

open PLOT, "> Mg_plot_r_dr.dat"
    or die "Could not open plot_r_dr.dat: $!\n";
foreach (@Mg_plot_line_r_dr) {print PLOT $_}
close PLOT;

open PLOT, "> Mg_plot_r_dx.dat"
    or die "Could not open plot_r_dx.dat: $!\n";
foreach (@Mg_plot_line_r_dx) {print PLOT $_}
close PLOT;

print "All data files writen.\n";
