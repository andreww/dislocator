#! /usr/bin/perl -w

#
#    Copyright 2010 Andrew Walker
#
#    This file is part of the Dislocator package.
#
#    The Dislocator package is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    The Dislocator package is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with the Dislocator package.  If not, see <http://www.gnu.org/licenses/>.
#


##############################################################################
#                                                                            #
# A simple script to make a circular super cell from a gulp output file      #
#   of one full cell (nosym and full keywords).                              #
#                                                                            #
#   USAGE: dislocate_makecell r h dx dy bulk.gout cell.out                   #
#             r  - the cell radius                                           #
#             h  - the cell hight                                            #
#             dx - displacment along x                                       #
#             dy - dislpacment along y                                       #
#                                                                            #
#    The cell is periodic along z (but is rotated so this is x in output)    #
#                                                                            #
#                        Andrew Walker  7 - 1 - 2003                         #
#                                                                            #
##############################################################################


# Modules and pragmas.
use Math::Trig;

# Arguments from comand line

my $radius = $ARGV[0];
my $hight = $ARGV[1];
my $disp_x = $ARGV[2];
my $disp_y = $ARGV[3];
my $filename = $ARGV[4];    
my $outputfile = $ARGV[5];
    
# reading flags
my $atom_flag = 0;
my $vect_flag = 0;

open GULPOUT, "< $filename"
    or die "Could not open $filename for reading: $!\n";

print "makecell: $filename open for reading\n";
 
while (<GULPOUT>) {
    
# Get lattice vectors
    
    if (/Total number atoms\/shells =/) {
	$n = substr($_,31,6);
	next;
    }
    
    if (/Cartesian lattice vectors \(Angstroms\) :/) {
# NB this uses the input latice vectors - should use conv calc!!
	$vect_flag = 3;
	next;
    }
    
    if ((/[0-9]/) and ($vect_flag == 1)) {
	$lattice_c[0] = substr($_,7,9);
	$lattice_c[1] = substr($_,19,9);
	$lattice_c[2] = substr($_,31,9);
	$vect_flag = 0;
	print "Vect c read\n";
	next;
    }
    
    if ((/[0-9]/) and ($vect_flag == 2)) {
	$lattice_b[0] = substr($_,7,9);
	$lattice_b[1] = substr($_,19,9);
	$lattice_b[2] = substr($_,31,9);
	$vect_flag = 1;
	print "vect b read\n";
	next;
    }
    
    if ((/[0-9]/) and ($vect_flag == 3)) {
	$lattice_a[0] = substr($_,7,9);
	$lattice_a[1] = substr($_,19,9);
	$lattice_a[2] = substr($_,31,9);
	$vect_flag = 2;
	print "vect a read\n";
	next;
    }
    
# Get atomic co-ordinates
    
    if (/Fractional coordinates of asymmetric unit :/) {
	$atom_flag = 3;
    }
    
    if ((/-{79}/) and ($atom_flag > 0)) {
	$atom_flag --;
	next;
    }
    
    if ($atom_flag == 1) {
	my @split_line = split;            #
	push (@atom_name, $split_line[1]); # to fix the one lable bugggg 
	push (@atom_x, substr($_,17,10));
	push (@atom_y, substr($_,29,10));
	push (@atom_z, substr($_,41,10));
	push (@atom_type, substr($_,14,1));
	push (@atom_charge, substr($_,54,10));
	next;
    }
    
    

    
}

close GULPOUT;

print "latice_vectors\n";
print "$lattice_a[0] $lattice_a[1] $lattice_a[2]\n";
print "$lattice_b[0] $lattice_b[1] $lattice_b[2]\n";
print "$lattice_c[0] $lattice_c[1] $lattice_c[2]\n";

print "makecell: input data read\n"; 

#
# Calculate cartesean co-ordinates of atoms in this cell
#

print "makecell: calculating cartesian co-ordinates and displacing atoms\n";
foreach (0 .. $n-1) {
    $c_atom_x[$_] = &orth_x ($_) + $disp_x;
    $c_atom_y[$_] = &orth_y ($_) + $disp_y;
    $c_atom_z[$_] = &orth_z ($_);
}



#
# make the cell
#


print "makecell: calculating co-ordinates of atoms in simulation cell.\n";
    
# make big disc ...
my $added = 0;
my ($a_mult, $b_mult, $c_mult);



foreach $c_mult (0 .. ( 2 + ($hight/(($lattice_a[2]) + ($lattice_b[2]) + ($lattice_c[2]))))) {
print "c_mult = $c_mult\n"; 
#    foreach $a_mult (-100 .. 100) {
#	foreach $b_mult (-100 .. 100) {
    
    foreach $a_mult ((-1*(3+($radius/($lattice_a[0] + $lattice_b[0] + $lattice_c[0]))))
		     .. (3+($radius/($lattice_a[0] + $lattice_b[0] + $lattice_c[0])))) {
	print "\ta_mult = $a_mult\n";
	foreach $b_mult ((-1*(3+($radius/(($lattice_a[1]) + ($lattice_b[1]) + ($lattice_c[1])))))
			 .. (3+($radius/(($lattice_a[1]) + ($lattice_b[1]) + ($lattice_c[1]))))) {     
	    print "\t\tb_mult = $b_mult\n";
	    foreach (0 .. $n-1) {
		
		$dz = $c_atom_z[$_] + $c_mult*$lattice_a[2] +
		    $c_mult*$lattice_b[2] + $c_mult*$lattice_c[2];
		print "\t\t\tdz = $dz ";
		if (($dz) < $hight) {
		    $dy = $b_mult*$lattice_a[1] + $b_mult*$lattice_b[1] +
			$b_mult*$lattice_c[1] + $c_atom_y[$_];
		    $dx = $a_mult*$lattice_a[0] + $a_mult*$lattice_b[0] +
			$a_mult*$lattice_c[0] + $c_atom_x[$_];
		    print "dy = $dy, dx = $dx";
		    if ( (sqrt( ($dy*$dy)+($dx*$dx) )) < $radius) {
# An atom to add!
			$added ++;
			print " OK\n";

			
# print the new atom to array1
			
			$line1 = $atom_name[$_];
		       
			# need type b gives bshe
			if ($atom_type[$_] eq "s") {
			    $line2 = " shel ";  
			} elsif ($atom_type[$_] eq "b") {
#Breathing shell model 
#NB only geting first letter from substr above

			    $line2 = " bshe ";
			} else {
			    $line2 = " core ";
			}
			
			$line3 = sprintf "%10.5f %10.5f %10.5f %10.5f "
			    , $dz, $dy, $dx, $atom_charge[$_];  # NB note swapped xyz so that x along z - periodic for gulp!
			
		       
			$line4 = " 1.00\n"; # occupancy
		      	
			push @temp_lines, ($line1 . $line2 . $line3 . $line4);
			
			
		    } else {print "too big\n"}# if square
		} else {print "too high\n"}
	    } # loop over ions in this cell
	}  #  foreach c
    }    # foreach b
}  # foreach a
print "makecell: $added atoms in simulation cell\n";


    
# print all the atoms

open OUTPUT, "> $outputfile"
    or die "could not open $outputfile for output: $!\n";       

print "makecell: $outputfile opend for output, writing cell\n";
select OUTPUT;

print "pcell\n";
print "$hight 0\n";
print "cartesian\n";
foreach (@temp_lines) {
    print $_;
}

select STDOUT;
close OUTPUT;    
print "makecell: $outputfile closed\n";
print "makecell: finished\n";


# These return x, y and z on cartesian co-ordinates given 
# latice vectors and fractonal co-ordinates. 

sub orth_x {
    no strict;
    my ($atom) = @_;
    $orth_x = $atom_x[$atom]*$lattice_a[0]
	+ $atom_y[$atom]*$lattice_b[0]
	    +  $atom_z[$atom]*$lattice_c[0];
}

sub orth_y {
    no strict;
    my ($atom) = @_;
    $orth_y = $atom_x[$atom]*$lattice_a[1]
	+ $atom_y[$atom]*$lattice_b[1]
	    +  $atom_z[$atom]*$lattice_c[1];
}

sub orth_z {
    no strict;
    my ($atom) = @_;
    $orth_z = $atom_x[$atom]*$lattice_a[2]
	+ $atom_y[$atom]*$lattice_b[2]
	    +  $atom_z[$atom]*$lattice_c[2];
}
