#! /usr/bin/perl -w

#
#    Copyright 2010 Andrew Walker
#
#    This file is part of the Dislocator package.
#
#    The Dislocator package is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    The Dislocator package is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with the Dislocator package.  If not, see <http://www.gnu.org/licenses/>.
#

use Math::Trig;
use Math::MatrixReal;

# read in filename for elastic info, burgurs vector 
#                    cell input name, cell output name

# Adding liniar interplation forcenter of dislocation

#
#  N.B Burgers vector is along x3 
#      Dislocation line along  x1
#      



my ($burg_vec_u1, $burg_vec_u2, $elast_file, $cell_input, $cell_output) = @ARGV;
my $num =  '[-+]?\d+\.?\d*'; # Matches any number, fp or dec
print "Running dislocator (anisotropic)....\n";
print "Paramiters are:\n";
print "gout file for elastic params: $elast_file\n";
print "burgers vector length: $burg_vec_u1, $burg_vec_u2\n";
print "cell file w/o dislocation: $cell_input\n";
print "cell file with dislocation: $cell_output\n"; 
print "============================================================\n";
print "Geting elastic constants\n";
my ($S_matrix) = &get_elastic ($elast_file);

print "+++++++++++++++++++++++\n";
print $S_matrix;

#print "done, $s44, $s55\n";
print "opening files for IO\n";


open INPUT, "<$cell_input"
    or die "Could not open input file $cell_input : $!";
open OUTPUT, ">$cell_output"
    or die "Could not open output file $cell_output : $!";
my $number_of_atoms = 0;
while (<INPUT>) {

    if  # if statment to match atom data.
	(/^                                     ###################
	                                        #Patern to match: #

	 (\w+\s+core|\w+\s+shel|\w+\s+bshe)\s+                        #Atom name        #
	 ($num)\s+($num)\s+($num)\s+($num)\s+   #Coord and charge #
	 ($num[\s+\d\s+\d\s+\d]?)               #occup and ?flags #
	                                        ###################
	 /xo) 
    {  # Found an atom - store its details and bung a marker in $_ 
	
	my $atom_name = $1;
	my $cart_x = $2; # NOTE will fall down for res files
                         # as they use frac cart cart...
	my $cart_y = $3;
	my $cart_z = $4;
	my $atom_chrg = $5;
	my $atom_flag = $6;

	$number_of_atoms ++;

# Move the atom # note rotation of axies
#	($cart_y, $cart_z) = &displace_atom ($cart_y, $cart_z,
#					     0 , 0);
	
#	$cart_x = &anisotropic_1 ($cart_y, $cart_z, $cart_x,
#				  $s44, $s55, $burg_vec);
	
	my ($u1_cart_z, $u1_cart_y) = &anisotropic_edge_u1 
	    ($cart_z, $cart_y, $cart_x, $S_matrix, $burg_vec_u1); 
	my ($u2_cart_y, $u2_cart_z) = &anisotropic_edge_u2 
	    ($cart_y, $cart_z, $cart_x, $S_matrix, $burg_vec_u2);

	$cart_z +=  $u1_cart_z + $u2_cart_z;
	$cart_y +=  $u1_cart_y + $u2_cart_y;


# Transmutate atoms in the top right quadrent!!! 
#Dont know why but it looks like it will work
# need to deal with the shells - remember that in a cubic material
# they will be on top of the oxygens but in olivine they will not
# and what do I do about non cubic materials, cannot just transmute atoms!	

# NOT needed for Mg2SiO4 with simple cell
# For the 100 angstrom cell - we need to be a bit less than 0 for the cuttoff?
	if (($cart_z >= -0.01) and ($cart_y >= -0.01)) {
	    if ($atom_name =~ s/Mg/O/) {
		$atom_chrg = -2.0000;
		print "changed O to Mg\n";
		$_ =  
		    "$atom_name $cart_x $cart_y $cart_z $atom_chrg $atom_flag";
#		print OUTPUT "O bshe $cart_x $cart_y $cart_z -2.80000 $atom_flag";
#		print "And plonked down a new core...\n";
	    } elsif ($atom_name =~ s/O/Mg/) {
		print "changed Mg to O\n";
		$atom_chrg = "2.0000";
		$_ =  
		    "$atom_name $cart_x $cart_y $cart_z $atom_chrg $atom_flag";
		if ($atom_name =~ /bshe/) {
		    print "getting rid of an Mg shel!\n";
		    $_ = "";
		}
	    }
	} else {
	    $_ =  "$atom_name $cart_x $cart_y $cart_z $atom_chrg $atom_flag";
	}
    }
    
    print OUTPUT "$_";
}


close INPUT;
close OUTPUT;
print "Finished - done $number_of_atoms atoms\n";

sub displace_atom {
# dislplaces atom on y and z (in gulp speak) and 
# returns an array @y,z...
    my ($y, $z, $dy, $dz) = @_;
    $y += $dy;
    $z += $dz;
    return ($y, $z);
}

sub isotropic_edge {

#
#  based on eq 22 of Kosevich (p 50 of Dislocations in Solids)
#

    my ($x, $y, $z, $poissons, $burg) = @_;

    print "isotropic_edge: $x, $y, $z, $poissons, $burg  \n";

# Calculate r^2 and theta (from 0 - 2pi)

    if (($x == 0) and ($y == 0)) {
	return (0, 0);
    }

    my $r_sq = ($x*$x + $y*$y);
    if ($r_sq == 0) {
	$r_sq =  0.000000000000000000000000000000000001;
    }

    my $r = sqrt $r_sq;
    print "r squared = $r_sq\n";


    my $angle = 0;
    if ($x == 0.0) {
	$x = 0.0000000000000000000000000000000000000001;
    }
    if (($y >= 0) and ($x > 0)) {
	$angle = atan ($y/$x);
    } elsif (($y >= 0) and ($x < 0)) {
	$angle = atan ($y/$x) + pi;
    } elsif (($y < 0) and ($x < 0)) {
	$angle = atan ($y/$x)  + pi;
    } elsif (($y < 0) and ($x > 0)) {
	$angle = atan ($y/$x) + 2*pi;
    } else {
	die "error in angle calc (sub anisotropic_1)!\n";
    }
    print "theta = $angle rads\n";

# calculate ux and uy

#    my $u_x = (($burg / 2 * pi) *
#	       ($angle + ( (1/(2*(1-$poissons))) * 
#			   (($x * $y)/$r_sq))));
    
#    my $u_y = (($burg / ((4 * pi) * (1-$poissons)))
#	      * (((1 - (2*$poissons)) *
#		  ln ($r)) + (($x*$x)/$r_sq)));

# Nabarros solutions

    my $u_x = (($burg / ((4 * pi) * (1-$poissons))) *
	       (($x * $y) / $r_sq) - (($burg/(2*pi)) *
				      $angle));
	       
    my $u_y = -1 * ((((1 - (2*$poissons))*$burg)/
		     (8 * pi * (1-$poissons))) *
		    log ($r_sq/($burg*$burg))) +
		    (($burg/(4 * pi * (1-$poissons))) *
		     (($y * $y)/$r_sq));

# return new co-ords

    print "Dx = $u_x\tDy = $u_y\n";

   $x += $u_x;
   $y += $u_y;
 

   
    return ($x, $y);

}
sub anisotropic_edge_u1 {

#
#  based on eq 3.1 - 3.10 of Steeds 
#

    my ($x, $y, $z, $S_matrix, $burg) = @_;

    print "anisotropic_edge: co-ords $x, $y, $z\n";
    print "burg u1: $burg  \n";
 #   print "$S_matrix\n";

# Calculate big and small lamda (e.q 3.2)
    my $l = ((($S_matrix -> element(2,2))
	      /($S_matrix -> element(1,1))))**(1/4);
	     
    my $L = (-1*(((2*($S_matrix -> element(1,2)))
		  +($S_matrix -> element(6,6)))
		 /(2*($S_matrix -> element(1,1)))));
    print "L = $L\n";
    print "l = $l\n";
   

#    print "FORCING ISOTROPIC SOLUTION\n";
#    $L = -1;
#    $l = 1;
#    print "L = $L\n";
#    print "l = $l\n";

# Calculate r^2 and theta (from 0 - 2pi)

    if (($x == 0) and ($y == 0)) {
	print "Called for 0,0!\n";
	print "So doing interploation by calling routine...\n";

	my ($x_1, $y_1) = &anisotropic_edge_u1 (0.001, 0.001, $z,
					      $S_matrix, $burg);

	my ($x_2, $y_2) = &anisotropic_edge_u1 (-0.001, -0.001, $z,
					      $S_matrix, $burg);
	$u_x = 1/2*($x_1+$x_2);
	$u_y = 1/2*($y_1+$y_2);
	print "Interpolation done.....\n";
 print "$x\t$y returned       <<<<<\n";
	return ($u_x, $u_y);
    }

    my $r_sq = ($x*$x + $y*$y);
    if ($r_sq == 0) {
	$r_sq =  0.000000000000000000000000000000000001;
    }

    my $r = sqrt $r_sq;
    print "$r_sq\t";


    my $angle = 0;
    if ($x == 0.0) {
	$x = 0.0000000000000000000000000000000000000001;
    }
    if (($y >= 0) and ($x > 0)) {
	$angle = atan ($y/$x);
    } elsif (($y >= 0) and ($x < 0)) {
	$angle = atan ($y/$x) + pi;
    } elsif (($y < 0) and ($x < 0)) {
	$angle = atan ($y/$x)  + pi;
    } elsif (($y < 0) and ($x > 0)) {
	$angle = atan ($y/$x) + 2*pi;
    } else {
	die "error in angle calc (sub anisotropic_1)!\n";
    }
    print "$angle\t";
    if ($angle == 0) {
	$angle = 0.0000000000000000000000001;
	print "theta = $angle rads to avoid divide by 0\n>>>";
    }
# calculate ux and uy

#    my $u_x = (($burg / 2 * pi) *
#	       ($angle + ( (1/(2*(1-$poissons))) * 
#			   (($x * $y)/$r_sq))));
    
#    my $u_y = (($burg / ((4 * pi) * (1-$poissons)))
#	      * (((1 - (2*$poissons)) *
#		  ln ($r)) + (($x*$x)/$r_sq)));

# Nabarros solutions

 #   my $u_x = (($burg / ((4 * pi) * (1-$poissons))) *
#	       (($x * $y) / $r_sq) - (($burg/(2*pi)) *
#				      $angle));
#	       
#    my $u_y = -1 * ((((1 - (2*$poissons))*$burg)/
#		     (8 * pi * (1-$poissons))) *
#		    log ($r_sq/($burg*$burg))) +
#		    (($burg/(4 * pi * (1-$poissons))) *
	#	     (($y * $y)/$r_sq));

    my $u_x_a = $burg/(4*pi);
    my $u_x_b;
# UXB gets a atan taken - so a bit of messing about to make it continuous
    my $u_x_b_y = ((sqrt(2*(($l**2)-$L)) 
		    * tan ($angle)));
    my $u_x_b_x = (1 - (($l**2)*((tan($angle))**2)));
    if (($u_x_b_y >= 0) and ($u_x_b_x > 0)) {
	$u_x_b = atan ($u_x_b_y/$u_x_b_x);
    } elsif (($u_x_b_y >= 0) and ($u_x_b_x < 0)) {
	$u_x_b = atan ($u_x_b_y/$u_x_b_x) + pi;
    } elsif (($u_x_b_y < 0) and ($u_x_b_x < 0)) {
	$u_x_b = atan ($u_x_b_y/$u_x_b_x) + pi ;
    } elsif (($u_x_b_y < 0) and ($u_x_b_x > 0)) {
	$u_x_b = atan ($u_x_b_y/$u_x_b_x) + 2*pi;
    } else {
	die "error in angle calc to get uxb, u_x_b_x = $u_x_b_x, u_x_b_y = $u_x_b_y!\n";
    }
    if ($angle > pi) {
	$u_x_b += 2*pi;
    }
 
    my ($u_x, $u_y);
    if ($l**4 > $L **2) {

# EQ 3.10a ...
	my $u_x_c =  (($L+
		       (($S_matrix -> element(1,2))
			/ ($S_matrix -> element(1,1))))
		      / sqrt($l**4 - $L**2));

	my $u_x_d = ( ((cos($angle))**2 + ($l**2 * (sin($angle))**2)
		       - (sqrt(($L+$l**2)/2) * sin(2*$angle)))
		      /
		      ((cos($angle))**2 + ($l**2 * (sin($angle))**2)
		       + (sqrt(($L+$l**2)/2) * sin(2*$angle))) );

	$u_x = $u_x_a * 
	    (($u_x_b) + ($u_x_c * log ($u_x_d)));
#  NB perl log function is ln (natural log)

# EQ 3.10b ...	

	my $u_y_a = ( ($l**2 + (($S_matrix -> element(1,2))
			/ ($S_matrix -> element(1,1))))
		      / (sqrt(2*($l**2-$L))) );
	my $u_y_b = ( (cos($angle)**4) + (($l**4)*(sin($angle)**4))
		      - (0.5*$L*(sin(2*$angle))**2) );
	my $u_y_c = ( ($l**2 - (($S_matrix -> element(1,2))
				/ ($S_matrix -> element(1,1))))
		      / (sqrt(2*($L+($l**2)))) );

	my $u_y_d;
	if ($angle == 0) {
	    $u_y_d = ( (sqrt($l**4-$L**2)) / ((cot
					       (0.0000000000000000000000000001)
					       **2)-$L) );
	} else {
	    $u_y_d = ( (sqrt($l**4-$L**2)) / ((cot($angle)**2)-$L) );
	}
	$u_y = $u_x_a *
	    ((-1*$u_y_a) * log ($r_sq*sqrt($u_y_b))
	     + $u_y_c * atan ($u_y_d));
 

    } else {
	
# EQ 3.7 ....
	
	my $u_x_c =  (($L+
		       (($S_matrix -> element(1,2))
			/ ($S_matrix -> element(1,1))))
		      / sqrt($L**2 - $l**4));
	my $u_x_d = (( sqrt(-2*($L+($l**2))) * tan ($angle))
		     / (1 + (($l**2)*((tan($angle))**2))));
	$u_x = $u_x_a * 
	    (($u_x_b) - ($u_x_c * atan ($u_x_d)));
# EQ 3.8 ...		       
#	die "Not done eq 3.8 yet";
	my $u_y_a = ( ($l**2 + (($S_matrix -> element(1,2))
			/ ($S_matrix -> element(1,1))))
		      / (sqrt(2*($l**2-$L))) ); 
# this (u_y_a) is the same as for EQ3.10b could move out side if.

	my $u_y_b = ( (cos($angle)**4) + (($l**4)*(sin($angle)**4))
		      - (0.5*$L*(sin(2*$angle))**2) ); 
# this (u_y_b) is the same as for EQ3.10b could move out side if.

	my $u_y_c = ( ($l**2 - (($S_matrix -> element(1,2))
				/ ($S_matrix -> element(1,1))))
		      / (2*sqrt(-2*($L+($l**2)))) );

	my $u_y_d =  ((cos($angle)**2) - 
		      (($L - sqrt(($L**2)-($l**4)))*(sin($angle)**2))) 
	    / ((cos($angle)**2) - 
	       (($L - sqrt(($L**2)+($l**4)))*(sin($angle)**2))) ;	
	
	$u_y = $u_x_a *(((-1*$u_y_a)* log ($r_sq*sqrt($u_y_b)))
			+ ($u_y_c * log ($u_y_d)));
	
    }

    
# return new co-ords

    print "$u_x\t$u_y        <<<<<\n";

   # $x += $u_x;
   # $y += $u_y;
 
    
   
    return ($u_x, $u_y);

}

sub anisotropic_edge_u2 {

####### NEED TO CHANG ALL EQ's!!!

#
#  based on eq 3.1 - 3.10 of Steeds 
#

    my ($x, $y, $z, $S_matrix, $burg) = @_;

    print "anisotropic_edge: co-ords $x, $y, $z\n";
    print "burg u2: $burg  \n";
 #   print "$S_matrix\n";

# Calculate big and small lamda (e.q 3.2)
    my $l = ((($S_matrix -> element(2,2))
	      /($S_matrix -> element(1,1))))**(1/4);
	     
    my $L = (-1*(((2*($S_matrix -> element(1,2)))
		  +($S_matrix -> element(6,6)))
		 /(2*($S_matrix -> element(1,1)))));
    print "L = $L\n";
    print "l = $l\n";
   

#    print "FORCING ISOTROPIC SOLUTION\n";
#    $L = -1;
#    $l = 1;
#    print "L = $L\n";
#    print "l = $l\n";

# Calculate r^2 and theta (from 0 - 2pi)

    if (($x == 0) and ($y == 0)) {
	print "Called for 0,0!\n";
	print "So doing interploation by calling routine...\n";

	my ($x_1, $y_1) = &anisotropic_edge_u2 (0.001, 0.001, $z,
					      $S_matrix, $burg);

	my ($x_2, $y_2) = &anisotropic_edge_u2 (-0.001, -0.001, $z,
					      $S_matrix, $burg);
	$u_x = 1/2*($x_1+$x_2);
	$u_y = 1/2*($y_1+$y_2);
	print "Interpolation done.....\n";
 print "$x\t$y returned       <<<<<\n";
	return ($u_x, $u_y);
    }

    my $r_sq = ($x*$x + $y*$y);
    if ($r_sq == 0) {
	$r_sq =  0.000000000000000000000000000000000001;
    }

    my $r = sqrt $r_sq;
    print "$r_sq\t";


    my $angle = 0;
    if ($x == 0.0) {
	$x = 0.0000000000000000000000000000000000000001;
    }
    if (($y >= 0) and ($x > 0)) {
	$angle = atan ($y/$x);
    } elsif (($y >= 0) and ($x < 0)) {
	$angle = atan ($y/$x) + pi;
    } elsif (($y < 0) and ($x < 0)) {
	$angle = atan ($y/$x)  + pi;
    } elsif (($y < 0) and ($x > 0)) {
	$angle = atan ($y/$x) + 2*pi;
    } else {
	die "error in angle calc (sub anisotropic_1)!\n";
    }
    print "$angle\t";
    if ($angle == 0) {
	$angle = 0.0000000000000000000000001;
	print "theta = $angle rads to avoid divide by 0\n>>>";
    }


## NB for ease call u1 u_y and u2 ux...

    my $u_x_a = $burg/(4*pi);
    my $u_x_b;
# UXB gets a atan taken - so a bit of messing about to make it continuous
    my $u_x_b_y = ((sqrt(2*(($l**2)-$L)) 
		    * tan ($angle)));
    my $u_x_b_x = (1 - (($l**2)*((tan($angle))**2)));
    if (($u_x_b_y >= 0) and ($u_x_b_x > 0)) {
	$u_x_b = atan ($u_x_b_y/$u_x_b_x);
    } elsif (($u_x_b_y >= 0) and ($u_x_b_x < 0)) {
	$u_x_b = atan ($u_x_b_y/$u_x_b_x) + pi;
    } elsif (($u_x_b_y < 0) and ($u_x_b_x < 0)) {
	$u_x_b = atan ($u_x_b_y/$u_x_b_x) + pi ;
    } elsif (($u_x_b_y < 0) and ($u_x_b_x > 0)) {
	$u_x_b = atan ($u_x_b_y/$u_x_b_x) + 2*pi;
    } else {
	die "error in angle calc to get uxb, u_x_b_x = $u_x_b_x, u_x_b_y = $u_x_b_y!\n";
    }
    if ($angle > pi) {
	$u_x_b += 2*pi;
    }
 
    my ($u_x, $u_y);
    if ($l**4 > $L **2) {

#for u2... 
#note that eq 3.9b is identical to eq 3.7
# so transformation from 3.7 -> EQ 3.10a
# is the same as for 3.9b -> 3.10a!!

	my $u_x_c =  (($L+
		       (($S_matrix -> element(1,2))
			/ ($S_matrix -> element(1,1))))
		      / sqrt($l**4 - $L**2));

	my $u_x_d = ( ((cos($angle))**2 + ($l**2 * (sin($angle))**2)
		       - (sqrt(($L+$l**2)/2) * sin(2*$angle)))
		      /
		      ((cos($angle))**2 + ($l**2 * (sin($angle))**2)
		       + (sqrt(($L+$l**2)/2) * sin(2*$angle))) );

	$u_x = $u_x_a * 
	    (($u_x_b) + ($u_x_c * log ($u_x_d)));
#  NB perl log function is ln (natural log)

# for u1...
# note that eq 3.9a is simmilar to 3.8 
# the only difference is the addition of a 1/$l**2 term at the start.
# This is not affected by the 3.8 -> EQ 3.10b transformation...#
# so we use 3.8 with chage tofirst term only!!	

	my $u_y_a = ( ($l**2 + (($S_matrix -> element(1,2))
			/ ($S_matrix -> element(1,1))))
		      / (sqrt(2*($l**2-$L))) );
	my $u_y_b = ( (cos($angle)**4) + (($l**4)*(sin($angle)**4))
		      - (0.5*$L*(sin(2*$angle))**2) );
	my $u_y_c = ( ($l**2 - (($S_matrix -> element(1,2))
				/ ($S_matrix -> element(1,1))))
		      / (sqrt(2*($L+($l**2)))) );

	my $u_y_d;
	if ($angle == 0) {
	    $u_y_d = ( (sqrt($l**4-$L**2)) / ((cot
					       (0.0000000000000000000000000001)
					       **2)-$L) );
	} else {
	    $u_y_d = ( (sqrt($l**4-$L**2)) / ((cot($angle)**2)-$L) );
	}
	$u_y = ($u_x_a*(1/$l**2)) *
	    ((-1*$u_y_a) * log ($r_sq*sqrt($u_y_b))
	     + $u_y_c * atan ($u_y_d));
 

    } else {
	
# EQ 3.9b note this is the same as EQ 3.7 ....
	
	my $u_x_c =  (($L+
		       (($S_matrix -> element(1,2))
			/ ($S_matrix -> element(1,1))))
		      / sqrt($L**2 - $l**4));
	my $u_x_d = (( sqrt(-2*($L+($l**2))) * tan ($angle))
		     / (1 + (($l**2)*((tan($angle))**2))));
	$u_x = $u_x_a * 
	    (($u_x_b) - ($u_x_c * atan ($u_x_d)));
# EQ 3.9a ... 
#       Note this is equall to eq 3.8 but with 1/lambda**2 at start		       

#	die "Not done eq 3.8 yet";
	my $u_y_a = ( ($l**2 + (($S_matrix -> element(1,2))
			/ ($S_matrix -> element(1,1))))
		      / (sqrt(2*($l**2-$L))) ); 
# this (u_y_a) is the same as for EQ3.10b could move out side if.

	my $u_y_b = ( (cos($angle)**4) + (($l**4)*(sin($angle)**4))
		      - (0.5*$L*(sin(2*$angle))**2) ); 
# this (u_y_b) is the same as for EQ3.10b could move out side if.

	my $u_y_c = ( ($l**2 - (($S_matrix -> element(1,2))
				/ ($S_matrix -> element(1,1))))
		      / (2*sqrt(-2*($L+($l**2)))) );

	my $u_y_d =  ((cos($angle)**2) - 
		      (($L - sqrt(($L**2)-($l**4)))*(sin($angle)**2))) 
	    / ((cos($angle)**2) - 
	       (($L - sqrt(($L**2)+($l**4)))*(sin($angle)**2))) ;	
	
	$u_y = ($u_x_a * (1/$l**2)) *(((-1*$u_y_a)* log ($r_sq*sqrt($u_y_b)))
			+ ($u_y_c * log ($u_y_d)));
	
    }

    
# return new co-ords

    print "$u_x\t$u_y        <<<<<\n";

   # $x += $u_x;
   # $y += $u_y;
 
    
   # this returns x and y in the correct order!
    return ($u_x, $u_y);

}



sub anisotropic_1 {
# based on eq 3.13 from Steeds book. puts a screw dislocation into
# material along z (NB must then rotate xyz so it is allong x!)
    my ($x, $y, $z, $S_44, $S_55, $burg) = @_;
    print "sub anisotropic_1 called, paramiters are:\n";
    print "$x, $y, $z, $S_44, $S_55\n";


# Local variables  - may need to be able to change from comand
# line eventualy...

    my $force_isotropic = 1; # seting this to 1 forces an
                             # isotropic solution
    my $inter_radius = 8;    # Radius to interpolate accross core.


# Are we forcing isotropic limit? 
    if ($force_isotropic == 1) {
	$S_44 = $S_55; # this line fores the isotropic limit
	print "Forcing isotropic limit solution!\n";  
    }

# Do we need to calculate R and frac?
my $frac_move = 1; # assume we are outside radius 
    if ($inter_radius > 0) {
	my $r_sqr = (($x * $x) + ($y * $y));
	if ($r_sqr < ($inter_radius * $inter_radius)) {
	    $frac_move = ((sqrt ($r_sqr)) / $inter_radius);
	    print "Frac of solution to move = $frac_move\n";
	} 
    }

# calculate angle around z from x.
    # (such that theta runs from 0 to 2pi
    # not -pi to pi twice!)
    # also modulate the angle so as 
    # to apply an anisotropic solution.

    my $angle = 0;
    if ($x == 0.0) {
	$x = 0.00000000000000000000000000000000000000000000001;
    }
    if (($y >= 0) and ($x > 0)) {
	$angle = atan (($y/$x) *
		       sqrt ($S_44/$S_55)) ;
    } elsif (($y >= 0) and ($x < 0)) {
	$angle = atan (($y/$x) *
		       sqrt ($S_44/$S_55)) + pi;
    } elsif (($y < 0) and ($x < 0)) {
	$angle = atan (($y/$x) * 
		       sqrt ($S_44/$S_55)) + pi;
    } elsif (($y < 0) and ($x > 0)) {
	$angle = atan (($y/$x) *
		       sqrt ($S_44/$S_55)) + 2*pi;
    } else {
	die "error in angle calc (sub anisotropic_1)!\n";
    }
    print "theta = $angle rads\n";

    # work out displacments
    my $displacement = $frac_move * ($burg * ($angle/(2*pi)));
    print "Moving atom $displacement along z (x) axis\n";
    $z += $displacement;
    print "volt field data: $x $y $displacement\n";
    print "new position of atom is:\n";
    print "$x, $y, $z\n";
    print "-----------------------------------------------\n";
    return $z;
}

sub get_elastic {

#
# this subroutine is intended to extract the elastic constas
# from a gulp output file
#

    my $filename = $_[0];
    print "Atempting to read elastic complience matrix from $filename\n";
    my $compl_flag = 0;
    my @s;

    open GULPOUT, "<$filename" 
	or die "could not open $filename : $!\n";

    while (<GULPOUT>) {
	
# Get the Elastic Compliance Matrix
	if (/Elastic Compliance Matrix:/) {
	    $compl_flag = 3;
	}
	
	if ((/-{79}/) and ($compl_flag > 0)) {
	    $compl_flag --;
	    next;
	}
	
	if ($compl_flag == 1) {
	    my @line = split;
	    shift @line;
	    push (@s, @line); # @s is the matrix 11,12,13..16..21,22,23..65,66
	}
	
    }
    close GULPOUT;

  my  $s_matrix = Math::MatrixReal ->
	new_from_string ("[ $s[0] $s[1] $s[2] $s[3] $s[4] $s[5] ]\n
       [ $s[6] $s[7] $s[8] $s[9] $s[10] $s[11] ]\n
    [ $s[12] $s[13] $s[14] $s[15] $s[16] $s[17] ]\n
    [ $s[18] $s[19] $s[20] $s[21] $s[22] $s[23] ]\n
    [ $s[24] $s[25] $s[26] $s[27] $s[28] $s[29] ]\n
    [ $s[30] $s[31] $s[32] $s[33] $s[34] $s[35] ]\n"
	 );


    print "Full elastic complience matrix:\n";
    print "$s_matrix\n";
    print "Reducing matrix...\n";
    my $S_matrix = new Math::MatrixReal(6,6);
    $S_matrix = $s_matrix->each (
				 sub {
				     my $debug = 0;
				     my ($slm, $l, $m) = @_;
				     my $s3l = $s_matrix -> element(3,$l);
				     my $s3m = $s_matrix -> element($m,3);
				     my $s33 = $s_matrix -> element(3,3);
				     if ($debug != 0) {
					 print "Reducing element $l $m\n";
					 print "s33 = $s33 slm = $slm\n";
					 print "s3l = $s3l s3m = $s3m\n";
				     }
				     my $Slm = $slm - (($s3l*$s3m)/$s33);
				     print "Slm = $Slm\n" if ($debug != 0);
				     return $Slm;
				 });

    print "Reduced elastic complelastic complience matrix:\n";
    print $S_matrix;

    return $S_matrix;


#
# calculate components of reduced elactic complience matrix 
#

#    my $S_44 = $s[21] - (($s[15]*$s[15])/$s[14]); # S44 = s44-(s34s34/s33) I hope - ref steeds pg 5
 #   my $S_55 = $s[28] - (($s[16]*$s[16])/$s[14]); # S55 = s55-(s35s35/s33)
    
#   print "\nReduced elastic compliences: S44 = $S_44, S55 = $S_55\n";
    
#    if ($S_44 == $S_55) {
#	die "This reduces to an isotropic solution ... so use isotropic insted!\n";
#    }
    
#    if (($S_44 == 0) or ($S_55 == 0)) {
#	die "Reduced complience matrix has zero in 44 or 55!\n";
#    }

#    return ($s_matrix);
}
